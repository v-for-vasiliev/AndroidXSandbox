def build_versions = [:]
build_versions.android_gradle_plugin = '3.6.3'
build_versions.kotlin_version = "1.3.31"
build_versions.retrolambda = "3.7.0"
build_versions.min_sdk_version = 23
build_versions.target_sdk_version = 28
build_versions.compile_sdk_version = 28
build_versions.build_tools_version = "26.0.2"
ext.build_versions = build_versions

def versions = [:]
// Tests
versions.tests_core = "1.1.0"
versions.tests_rules = "1.1.1"
versions.tests_runner = "1.1.1"
versions.tests_junit = "1.1.0"

// Play services, https://developers.google.com/android/guides/setup
versions.playservices_location = "17.0.0"
versions.playservices_vision = "19.0.0"

// Support
versions.appcomap = "1.1.0";
versions.support = "1.0.0"
versions.core_ktx = "1.0.1"
versions.fragment = "1.1.0-alpha09"
versions.constraint_layout = "2.0.0-alpha2"

// Architecture components
versions.arch_core = "2.0.1"
versions.lifecycle = "2.0.0"

// Dagger2
versions.dagger2 = "2.23.2"

// RxJava2
versions.rxjava2 = "2.2.10"
versions.rxandroid = "2.1.1"
versions.rxkotlin = "2.4.0"
versions.rxbinding = "3.0.0-alpha2"
versions.rxpermissions = "0.10.2"

// Network
versions.retrofit = "2.3.0"
versions.okhttp = "4.0.1"
versions.okhttp_logging_interceptor = "3.9.0"

// MVP
versions.moxy = "2.1.1"

// UI
versions.butterknife = "10.0.0"
versions.glide = "4.3.1"
versions.qrgen = "2.6.0"
versions.photo_view = "2.3.0"
versions.barcodescanner = "1.9.13"
versions.zbar = "1.9.13"

// Persistence
versions.room = "2.1.0-alpha06"

// Tools
versions.timber = "4.1.2"
versions.gson = "2.8.0"
versions.jodatime = "2.9.9"
versions.stetho = "1.5.0"
versions.dexter = "6.0.2"

ext.versions = versions

ext.deps = [:]
def deps = [:]

def plugins = [:]
plugins.android_gradle_plugin = "com.android.tools.build:gradle:${build_versions.android_gradle_plugin}"
plugins.kotlin_gradle_plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:${build_versions.kotlin_version}"
plugins.retrolambda = "me.tatarka:gradle-retrolambda:${build_versions.retrolambda}"
deps.plugins = plugins

def kotlin = [:]
kotlin.kotlin = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${build_versions.kotlin_version}"
kotlin.core_ktx = "androidx.core:core-ktx:${versions.core_ktx}"
kotlin.fragment_runtime_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}"
kotlin.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
kotlin.fragment_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}"
kotlin.reactivestreams_ktx = "androidx.lifecycle:lifecycle-reactivestreams-ktx:${versions.lifecycle}"
deps.kotlin = kotlin

def tests = [:]
tests.core = "androidx.test:core:$versions.tests_core"
tests.ext_junit = "androidx.test.ext:junit:$versions.tests_junit"
tests.runner = "androidx.test:runner:$versions.tests_runner"
tests.rules = "androidx.test:rules:$versions.tests_rules"
deps.tests = tests

def play_services = [:]
play_services.location = "com.google.android.gms:play-services-location:${versions.playservices_location}"
play_services.vision = "com.google.android.gms:play-services-vision:${versions.playservices_vision}"
deps.play_services = play_services

def support = [:]
support.appcompat = "androidx.appcompat:appcompat:${versions.appcompat}"
support.design = "com.google.android.material:material:${versions.support}"
support.recyclerview = "androidx.recyclerview:recyclerview:${versions.support}"
support.cardview = "androidx.cardview:cardview:${versions.support}"
support.constaint_layout = "androidx.constraintlayout:constraintlayout:${versions.constraint_layout}"
support.fragment_runtime = "androidx.fragment:fragment:${versions.fragment}"
support.fragment_testing = "androidx.fragment:fragment-testing:${versions.fragment}"
deps.support = support

def arch_core = [:]
arch_core.runtime = "androidx.arch.core:core-runtime:${versions.arch_core}"
arch_core.testing = "androidx.arch.core:core-testing:${versions.arch_core}"
deps.arch_core = arch_core

def lifecycle = [:]
// ViewModel and LiveData
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
// Alternatively - just ViewModel, for Kotlin use lifecycle-viewmodel-ktx
lifecycle.viewmodel = "androidx.lifecycle:lifecycle-viewmodel:${versions.lifecycle}"
// Alternatively - just LiveData
lifecycle.livedata = "androidx.lifecycle:lifecycle-livedata:${versions.lifecycle}"
lifecycle.livedata_core = "androidx.lifecycle:lifecycle-livedata-core:${versions.lifecycle}"
// Alternatively - Lifecycles only (no ViewModel or LiveData). Some UI AndroidX
// libraries use this lightweight import for Lifecycle
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:${versions.lifecycle}"
// Compiler, for Kotlin use kapt instead of annotationProcessor
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:${versions.lifecycle}"
// Alternately - if using Java8, use the following instead of lifecycle-compiler
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"
// Optional - ReactiveStreams support for LiveData, for Kotlin use lifecycle-reactivestreams-ktx
lifecycle.reactivestreams = "androidx.lifecycle:lifecycle-reactivestreams:${versions.lifecycle}"
// Optional - Test helpers for LiveData
lifecycle.core_testing = "androidx.arch.core:core-testing:${versions.lifecycle}"
deps.lifecycle = lifecycle

def dagger2 = [:]
dagger2.dagger2 = "com.google.dagger:dagger:${versions.dagger2}"
dagger2.compiler = "com.google.dagger:dagger-compiler:${versions.dagger2}"
dagger2.android = "com.google.dagger:dagger-android:${versions.dagger2}"
dagger2.support = "com.google.dagger:dagger-android-support:${versions.dagger2}"
dagger2.android_compiler = "com.google.dagger:dagger-android-processor:${versions.dagger2}"
deps.dagger2 = dagger2

def rxjava2 = [:]
rxjava2.rxjava2 = "io.reactivex.rxjava2:rxjava:${versions.rxjava2}"
rxjava2.rxkotlin = "io.reactivex.rxjava2:rxkotlin:${versions.rxkotlin}"
rxjava2.rxandroid = "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"
rxjava2.rxbinding = "com.jakewharton.rxbinding3:rxbinding:${versions.rxbinding}"
rxjava2.rxpermissions = "com.github.tbruyelle:rxpermissions:${versions.rxpermissions}"
deps.rxjava2 = rxjava2

def retrofit = [:]
retrofit.retrofit = "com.squareup.retrofit2:retrofit:${versions.retrofit}"
retrofit.rxjava2_adapter = "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
retrofit.converter_gson = "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
retrofit.converter_jackson = "com.squareup.retrofit2:converter-jackson:${versions.retrofit}"
retrofit.converter_simplexml = "com.squareup.retrofit2:converter-simplexml:${versions.retrofit}"
deps.retrofit = retrofit

def okhttp = [:]
okhttp.okhttp = "com.squareup.okhttp3:okhttp:${versions.okhttp}"
okhttp.mock_web_server = "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"
okhttp.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"
deps.okhttp = okhttp

def room = [:]
room.runtime = "androidx.room:room-runtime:${versions.room}"
room.compiler = "androidx.room:room-compiler:${versions.room}"
room.rxjava2 = "androidx.room:room-rxjava2:${versions.room}"
room.testing = "androidx.room:room-testing:${versions.room}"
deps.room = room

def moxy = [:]
moxy.moxy = "com.github.moxy-community:moxy:${versions.moxy}"
moxy.compiler = "com.github.moxy-community:moxy-compiler:${versions.moxy}"
moxy.moxyX = "com.github.moxy-community:moxy-androidx:${versions.moxy}"
deps.moxy = moxy

def butterknife = [:]
butterknife.butterknife = "com.jakewharton:butterknife:${versions.butterknife}"
butterknife.compiler = "com.jakewharton:butterknife-compiler:${versions.butterknife}"
deps.butterknife = butterknife

def glide = [:]
glide.glide = "com.github.bumptech.glide:glide:${versions.glide}"
glide.compiler = "com.github.bumptech.glide:compiler:${versions.glide}"
deps.glide = glide

def stetho = [:]
stetho.stetho = "com.facebook.stetho:stetho:${versions.stetho}"
stetho.stetho_okhttp = "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"
deps.stetho = stetho

def tools = [:]
tools.timber = "com.jakewharton.timber:timber:${versions.timber}"
tools.gson = "com.google.code.gson:gson:${versions.gson}"
tools.jodatime = "joda-time:joda-time:${versions.jodatime}"
tools.dexter = "com.karumi:dexter:${versions.dexter}"
deps.tools = tools

def ui = [:]
ui.qrgen = "com.github.kenglxn.QRGen:android:${versions.qrgen}"
ui.photo_view = "com.github.chrisbanes:PhotoView:${versions.photo_view}"
ui.barcodescanner = "me.dm7.barcodescanner:zxing:${versions.barcodescanner}"
ui.zbar = "me.dm7.barcodescanner:zbar:${versions.zbar}"
deps.ui = ui

ext.deps = deps

static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    handler.maven { url "https://jitpack.io" }
}

ext.addRepos = this.&addRepos
